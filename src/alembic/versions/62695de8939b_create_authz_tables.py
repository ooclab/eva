"""create authz tables

Revision ID: 62695de8939b
Revises: c3bfce91dc28
Create Date: 2020-08-18 15:29:38.522631

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "62695de8939b"
down_revision = "c3bfce91dc28"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "eva_permission",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(length=512), nullable=True),
        sa.Column("name", sa.String(length=512), nullable=True),
        sa.Column("summary", sa.String(length=1024), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "eva_role",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(length=128), nullable=True),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("summary", sa.String(length=1024), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "eva_identity__role",
        sa.Column("identity_id", sa.Integer(), nullable=True),
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["identity_id"], ["eva_identity.id"]),
        sa.ForeignKeyConstraint(["role_id"], ["eva_role.id"]),
    )
    op.create_table(
        "eva_role__permission",
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.Column("permission_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["permission_id"], ["eva_permission.id"]),
        sa.ForeignKeyConstraint(["role_id"], ["eva_role.id"]),
    )

    bind = op.get_bind()
    db = sa.orm.Session(bind=bind)
    from codebase.models.authz import Role, Permission
    from codebase.models.auth import Identity, IdentifierType, Credential
    from haomo.conf import settings

    role = Role(code=settings.ADMIN_ROLE_CODE, name=settings.ADMIN_ROLE_NAME)
    db.add(role)
    db.commit()

    # 查找 admin
    credential = (
        db.query(Credential)
        .filter(
            sa.and_(
                Credential.identifier == settings.ADMIN_USERNAME,
                Credential.identifier_type == IdentifierType.USERNAME,
            )
        )
        .first()
    )
    if credential:
        credential.identity.roles.append(role)
        db.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("eva_role__permission")
    op.drop_table("eva_identity__role")
    op.drop_table("eva_role")
    op.drop_table("eva_permission")
    # ### end Alembic commands ###
