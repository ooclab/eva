openapi: 3.0.3
info:
  title: eva
  version: '1.0'
  description: |
    用户服务
    
    TODO:
    1. 创建、更新、删除用户
    2. 支持多种类型的用户唯一标识符（手机号、邮件、用户名等）
    3. 支持多种身份验证方案（密码、手机验证码等）
  contact:
    name: 好风
    email: gwindfree@gmail.com
    url: https://gwind.me
servers:
  - url: 'http://localhost:3000'

paths:

  "/":
    get:
      summary: 获取 OpenAPI 文档内容
      tags:
      - default
      description: |
        返回的内容为 YAML 格式文件，如果需要人性化可读，请使用 Swagger UI 或 Redocly 服务在线查看接口文档。
        
        示例，如果服务部署后，本接口的最终访问地址为 `http://127.0.0.1:3000/` ，则可以这样查看：
        
        - [`http://apidoc.ooclab.com/?url=http://127.0.0.1:3000/`](http://apidoc.ooclab.com/?url=http://127.0.0.1:3000/)
        - [`http://redocly.github.io/redoc/?url=http://127.0.0.1:3000/`](http://redocly.github.io/redoc/?url=http://127.0.0.1:3000/&nocors)
      responses:
        '200':
          description: 返回接口文档内容

  "/healthz":
    get:
      summary: 健康检查
      tags:
      - default
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                服务健康:
                  value: OK
      operationId: get-healthz
      description: 如果服务健康返回大写 `OK` 即可

  "/users":
    post:
      summary: 创建用户
      description: |
        创建用户
        
        1. 创建用仅指定 identifier 即可，后面再更新 password ，或只能使用验证码登录（目前还未支持）
        2. 如果指定了 password ，用户即可通过 password 登录
        3. 如果未指定 identifier 参数，则默认将该 identifier 当做用户名
      requestBody:
        description: 支持指定多中标识符
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  description: 标识符，用户名，邮件，手机等，同类型的标识符具有唯一性，可以查找到唯一用户。
                  type: string
                identifier_type:
                  description: 标识符类型
                  type: string
                  enum:
                  - USERNAME
                  - EMAIL
                  - PHONE
                  default: USERNAME
                password:
                  description: 用户密码
                  type: string
              required:
              - identifier
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: 错误代码
                  message:
                    type: string
                    description: 错误详细描述
                  data:
                    type: object
                    description: 可能的错误附加数据
                    properties:
                      uid:
                        type: string
                        description: 用户唯一ID
                required:
                  - code
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseFail'

components:
  schemas:
    ResponseSuccess:
      title: ResponseSuccess
      type: object
      x-examples:
        example-1:
          code: success
      properties:
        code:
          type: string
          description: 正确返回 success
    ResponseFail:
      title: DefaultFailResponse
      type: object
      properties:
        code:
          type: string
          description: 错误代码
        message:
          type: string
          description: 错误详细描述
        data:
          type: object
          description: 可能的错误附加数据
      required:
        - code
